<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=BIG5">
<title>遠端執行伺服端&nbsp;Script</title>
<TITLE>遠端 Script</TITLE></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="rsexecutingserverscriptremotely"></a>遠端執行伺服端 Script</h1>
<p>

複雜的 Web 應用程式與客戶端及伺服端 script 都有關係。客戶端 script 常用來撰寫應用程式的使用者介面程式&nbsp;－ 例如，若要動態變更網頁文字，請回應使用者動作 (如按鈕動作)，還有執行如客戶端導向的工作來確認。客戶端 script 會在本機瀏覽器中執行，執行之後便能提供給使用者既生動又具互動性的介面。</font></p>

<p>
相反地，伺服端 script 是用來撰寫應用程式的後端程式。這通常與存取資料庫或執行中階商務邏輯有關。伺服端 script 也常用來建立限制範圍寬廣的應用程式：指可以用很多不同類型的瀏覽器來存取的應用程式，每種應用程式都有不同功能。</p>
<p>
但是客戶端及伺服端 script 會彼此排外。第一次申請網頁時，伺服端可以執行伺服端 script，再將網頁傳到瀏覽器上，然後在客戶端執行客戶端 script。但是，如果必須再次於網頁上執行伺服端 script，則必須將網頁傳回給伺服端，伺服端才能重新製作網頁。網頁控制項及 scripts 值的狀態保持與瀏覽器及伺服端間資訊來回傳送的複雜 scripting 關係密切。此外，客戶端及伺服端之間資料傳輸的延遲通常會使應用程式速度變慢。</p>
<p>
<FONT COLOR=RED>遠端 scripting</FONT>是另一種選擇。遠端 scripting 讓您能在客戶端 script 中工作，但是它會呼叫 ASP 網頁中的方法 (函數或子常式)。實際上，只要擁有伺服端功能的完整存取權，您就可以將伺服端 script 視同本機常式來呼叫，但是它們會在伺服端上執行。因為您未曾離開目前網頁來呼叫伺服端 script，網頁狀態會保持不變。</p>
<p>
諸如此類的工作，您可以使用遠端 scripting：
<ul>
<li>
使用者持續與資料項目表互動時，伺服端上的資料查詢及資料驗證。<br><br></li>
<li>
在不需要更新螢幕的情況之下，從伺服端更新網頁中的資訊。</li>
</ul>
</font>
<H2>遠端 Scripting 如何運作</H2></p>
<p>
複雜的 Web 應用程式與客戶端及伺服端 script 都有關係。客戶端 script 常用來撰寫應用程式的使用者介面程式&nbsp;－ 例如，若要動態變更網頁文字，請回應使用者動作 (如按鈕動作)，還有執行如客戶端導向的工作來確認。客戶端 script 會在本機瀏覽器中執行，執行之後便能提供給使用者既生動又具互動性的介面。</p>

<p>在您想要執行伺服端方法時，遠端 scripting 便作為您從客戶端 script 
所呼叫函數的程式庫。在您呼叫伺服端方法時，您的要求會連線到瀏覽器中非同步執行的 proxy 過程 (在目前實作中，proxy 會視為一個 Java 
applet)。proxy 過程會將要求傳送到一個伺服端，而該伺服端便包含您所呼叫的方法之 ASP 網頁。</p>
<p>伺服端會載入 ASP 網頁及網頁上的特殊常式，該常式會將您的要求傳遞給正確的函數。如果方法傳回一個值，該值會被傳回 proxy 
過程；這個方法是將該值包裝為一個物件&nbsp;- 一個呼叫物件&nbsp;- 其中包含傳回值及其它有用資訊的屬性。</p>
<p>當您在客戶端 script 中執行呼叫到伺服端方法時，您可以選擇用兩種方法來執行： </p>
<ul>
  <li><b>同步</b>&nbsp;&nbsp;&nbsp;您的 script 會呼叫遠端程序並等待它傳回。如果您在繼續執行之前需要遠端程序的結果，這個方法十分實用。<br>
  <br>
　</li>
  <li><b>非同步</b>&nbsp;&nbsp;&nbsp;您的 script 會將呼叫執行到遠端 
  script，然後再繼續進行。使用者仍可以繼續使用網頁。當呼叫需要耗時甚長時，非同步呼叫就很有用。</li>
</ul>
<h4>遠端 Scripting 的元件</h4>
<p>若要實作遠端 scripting，則除了您自己的客戶端檔案 (.htm) 及伺服端檔案 (.asp) 之外，還需要下列檔案： </p>
<ul>
  <li>Rs.htm&nbsp;&nbsp;&nbsp;包含您在 .htm 檔中所使用的方法，這些方法用來啟始遠端 scripting、執行遠端程序、檢查遠端呼叫的狀態、及取得方法結果。<br>
  <br>
　</li>
  <li>Rs.asp&nbsp;&nbsp;&nbsp;包含您從 .asp 檔呼叫所得的方法，這些方法用來啟始伺服端上的遠端 scripting，並將遠端 scripting 
  傳遞給網頁中適當的函數。<br>
  <br>
　</li>
  <li>Rsproxy.class&nbsp;&nbsp;&nbsp;包含 applet 的 Java 物件類別檔案 (物件程式碼)，這些 applet 負責客戶端與伺服端網頁間的通訊。</li>
</ul>
</font>
<p>



這些檔案的功能就像您可以從檔案內來使用的程式庫。一般而言，您只要在客戶端或伺服端網頁中加入相關檔案 (Rs.htm 或 Rs.asp)，再視需要來呼叫方法。有關如何執行這個動作的詳細資訊，請參閱</font><a href="rmscpt2.htm">在客戶端網頁中啟動遠端 Scripting</a>和<a href="rmscpt3.htm">在伺服端網頁中啟動遠端 Scripting</a>。</p>
<p>
在您的客戶端網頁中，您所引用的 Rs.htm 可讓該檔案中的方法用於您的伺服端 script。這些方法會呼叫到 Rsproxy applet。在您建立伺服端網頁時，便會將引用 Rs.asp 檔案的伺服端 INCLUDE 陳述式納入。當客戶端檔案含有 Rs.htm 時，便能讓所需的方法可用於伺服端網頁上。</p>
<p>
所有檔案必須可用於伺服端上。您可以將這些檔案放在方便使用的任何地方。但是，當伺服端發出要求時，您的客戶端及伺服端必須能夠存取放置的路徑。依照預設，遠端 scripting 程序假設是在伺服端或專案的虛擬根目錄之外的 _ScriptLibrary 資料夾中使用這些檔案。如果您沒有將檔案放在那裡，請留心記下您所存放的路徑，因為在您建立客戶端及伺服端網頁時，會需要指定路徑。</p>
<h2>遠端 Scripting 及安全性</h2>
<p>
遠端 scripting 會提供與 Java applet 或 Iframes 相同層級的安全性。若要確保遠端 scripting 不會侵害到伺服端安全性，您不能將結構化資料 (包含物件) 視為參數來傳給伺服端 script 執行。此外，您執行遠端 scripting 呼叫的伺服端必須與您指定包含要求的客戶端網頁之來源伺服端相同。</p>
</BODY>
</HTML>